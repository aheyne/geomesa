#!/usr/bin/env bash
#
# Copyright (c) 2013-2016 Commonwealth Computer Research, Inc.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0 which
# accompanies this distribution and is available at
# http://www.opensource.org/licenses/apache2.0.php.
#
#
# Entry point for the GeoMesa command line tools to access the aws-bootstrap-* functionality.
#

# Load common functions and setup
if [ -z "${%%gmtools.dist.name%%_HOME}" ]; then
  export %%gmtools.dist.name%%_HOME="$(cd "`dirname "$0"`"/../..; pwd)"
fi

. "${%%gmtools.dist.name%%_HOME}"/bin/common-functions.sh

NL=$'\n'
TAB=$'\t'
usage="usage: ./aws-bootstrap [s3_container_path <options>] | [-h|--help]"

function printHelp() {
  echo ""
  echo "Easily start up an Amazon EMR cluster preconfigured with GeoMesa, Spark, Hbase and optionally a Zeppelin"
  echo "or Jupyter notebook server pre-loaded with GeoMesa and examples."
  echo ""
  echo "Required:"
  echo "  -c,--container       S3 Bucket URL to use as the HBase root and bootstrap working directory"
  echo ""
  echo "Options:"
  echo "  -j,--jupyter         Specifying this parameter will install and configure a Jupyter notebook on the cluster"
  echo "                       master. Additionally, you can specify a password to use for the Jupyter server by"
  echo "                       providing a value to this parameter. e.g. -j=password or --jupyter=password"
  echo "                       Default password: geomesa"
  echo "  -z,--zeppelin        Specifying this parameter will install and configure a Zeppelin notebook on the cluster"
  echo "                       master."
  echo ""
  exit 0
}

ARGS=($@)

if [[ $# -eq 0 ]]; then
  printHelp
else
  while [[ $# -gt 0 ]]; do
    case $1 in
      -z|--zeppelin)
        ZEPPELIN=true
        shift
        ;;
      -j|--jupyter)
        JUPYTER=true
        if [[ $2 != -* ]]; then
          shift
          JUPYTER_PASSWORD="${1}"
        fi
        if [[ -z "${JUPYTER_PASSWORD}" ]]; then
          echo "Using default Jupyter password: geomesa"
          JUPYTER_PASSWORD="geomesa"
        fi
        shift
        ;;
      -c|--container)
        if [[ $2 != -* ]]; then
          shift
          CONTAINER="${1}"
        fi
        shift
        ;;
      -p|--aws-profile)
        if [[ $2 != -* ]]; then
          shift
          AWS_PROFILE="--profile ${1}"
        else
          echo "Invalid profile name"
          exit 1
        fi
        shift
        ;;
      -h|--help)
        printHelp
        ;;
      *)
        echo "Unknown argument: ${ARGS[$i]}"
        echo "${usage}"
        exit 1
        ;;
    esac
  done
fi

EC2_ATTRIBUTES="--ec2-attributes KeyName=CCRi,AdditionalMasterSecurityGroups=sg-507c2225"

# Detect if we're on an existing AWS Instance and the user is just wanting to install software
if [[ -f /mnt/var/lib/info/extraInstanceData.json ]]; then
  label=$(jq '.releaseLabel' /mnt/var/lib/info/extraInstanceData.json)
  if [[ $label == *emr* ]]; then
    echo "Detected running on EMR, will not start new Cluster."
    echo "Bootstrapping GeoMesa"
    sudo ${%%gmtools.dist.name%%_HOME}/aws-utils/aws-bootstrap-geomesa-hbase.sh

    if [[ -n "${ZEPPELIN}" ]]; then
      ( ${%%gmtools.dist.name%%_HOME}/bin/aws-utils/aws-bootstrap-geomesa-zeppelin.sh )
    fi

    if [[ -n "${JUPYTER}" ]]; then
      ( ${%%gmtools.dist.name%%_HOME}/bin/aws-utils/aws-bootstrap-geomesa-jupyter.sh "${JUPYTER_PASSWORD}" )
    fi

    echo "Bootstrap Complete"
  fi
fi

# Validate Parameters now since Container isn't needed if we're on an existing cluster
if [[ -z "${CONTAINER}" ]]; then
  echo "S3 container is required"
  exit 1
elif [[ "${CONTAINER}" != s3://* ]]; then
  echo "S3 container must be in the format 's3://'"
  exit 1
elif [[ "${CONTAINER}" != */ ]]; then
  # We need a trailing '/' for consistency
  CONTAINER="${CONTAINER}/"
fi

echo "Starting GeoMesa AWS EMR Bootstrap Process"

# Create a temp working dir
TMP_DIR=/tmp/geomesa-aws-bootstrap
if [[ ! -d $TMP_DIR ]]; then
  mkdir $TMP_DIR
fi
RUN_ID=0
WORKING_DIR=$TMP_DIR/$RUN_ID
while [[ -d "${WORKING_DIR}" ]]; do
  let RUN_ID=$RUN_ID+1
  WORKING_DIR=$TMP_DIR/$RUN_ID
done
mkdir $WORKING_DIR
echo "Run ID: ${RUN_ID}"
echo "Working directory: ${WORKING_DIR}"

# Package these tools and upload them to the container
tarball="${WORKING_DIR}/%%gmtools.assembly.name%%-bin.tar.gz"
pushd ${%%gmtools.dist.name%%_HOME}/..
tar -czf "${tarball}" %%gmtools.assembly.name%%/*
popd

# Upload resources
error=0
aws ${AWS_PROFILE} s3 cp "${tarball}" "${CONTAINER}" || error=1
aws ${AWS_PROFILE} s3 cp "${%%gmtools.dist.name%%_HOME}/bin/aws-utils/.aws-bootstrap-actions.sh" "${CONTAINER}" || error=1
if [[ error == 1 ]]; then
  echo "Failed to upload tools package" && exit 1
fi

# Setup hbase config
hbase_conf=${WORKING_DIR}/hbase_conf.json
echo "Writing HBase configuration to: ${hbase_conf}"
cat > ${hbase_conf} <<EOF
[
   {
     "Classification": "hbase-site",
     "Properties": {
          "hbase.rootdir": "${CONTAINER}",
          "hbase.bucketcache.size": "16384"
     }
   },
   {
     "Classification": "hbase",
     "Properties": { "hbase.emr.storageMode":"s3" }
   }
]
EOF

# Create cluster name
name="GeoMesa HBase on S3"
if [[ -n "${JUPYTER}" && -z "${ZEPPELIN}" ]]; then
  name="${name} with Jupyter"
elif [[ -z "${JUPYTER}" && -n "${ZEPPELIN}" ]]; then
  name="${name} with Zeppelin"
elif [[ -n "${JUPYTER}" && -n "${ZEPPELIN}" ]]; then
  name="${name} with Jupyter and Zeppelin"
fi

# Configure bootstrap arguments
BootstrapArgs="\"-c=${CONTAINER}\""
if [[ -n "${ZEPPELIN}" ]]; then
  BootstrapArgs="${BootstrapArgs},\"--zeppelin\""
fi
if [[ -n "${JUPYTER}" ]]; then
  BootstrapArgs="${BootstrapArgs},\"--jupyter=${JUPYTER_PASSWORD}\""
fi

cmd="
  aws ${AWS_PROFILE} emr create-cluster                                             \
    --name \"${name}\"                                                              \
    --release-label emr-5.10.0                                                      \
    --output text                                                                   \
    --use-default-roles                                                             \
    --applications Name=Hadoop Name=Zookeeper Name=Spark Name=HBase                 \
    ${EC2_ATTRIBUTES}                                                               \
    --instance-groups                                                               \
      Name=Master,InstanceCount=1,InstanceGroupType=MASTER,InstanceType=m1.large    \
      Name=Workers,InstanceCount=1,InstanceGroupType=CORE,InstanceType=m1.large     \
    --configurations file://${hbase_conf}                                           \
    --bootstrap-actions Name=BootstrapGeoMesa,Path=${CONTAINER}.aws-bootstrap-actions.sh,Args=[${BootstrapArgs}]
"

echo "Ready to create cluster with command:"
echo ""
echo $cmd
echo ""
read -r -p "Continue? (y/N) " confirm
confirm=${confirm,,} # lower-casing
if [[ $confirm =~ ^(yes|y) ]]; then
  # Create the cluster
  CID=$( eval ${cmd} )
else
  echo "Canceling"
  exit 1
fi

echo "Cluster ID: ${CID}"

status=""
count=0
while [[ -z "${status}" ]]; do
  let count=$count%3+1
  case $count in
    1)
      icon="\\"
      ;;
    2)
      icon="/"
      ;;
    3)
      icon="-"
      ;;
  esac
  echo -ne "Waiting for cluster provisioning ${icon} \r"
  sleep 1
  status=`aws ${AWS_PROFILE} emr describe-cluster --cluster-id $CID | grep MasterPublic | cut -d "\"" -f 4`
done

failure=`aws ${AWS_PROFILE} emr describe-cluster --cluster-id $CID | grep BOOTSTRAP_FAILURE | cut -d "\"" -f 4`
if [[ -n "${failure}" ]]; then
  echo -ne "Cluster setup failed"
else
  address=`aws ${AWS_PROFILE} emr describe-cluster --cluster-id $CID | grep MasterPublicDnsName | cut -d "\"" -f 4`
  echo -ne "Cluster has been provisioned and is bootstrapping\n"
  echo "Master public DNS name: ${address}"
  if [[ -n "${JUPYTER}" ]]; then
    echo "Jupyter will be available at: ${address}:8888"
  fi
fi

rm -r "${WORKING_DIR}"
